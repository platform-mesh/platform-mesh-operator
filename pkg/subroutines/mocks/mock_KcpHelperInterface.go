// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	rest "k8s.io/client-go/rest"

	v1 "k8s.io/api/core/v1"
)

// KcpHelper is an autogenerated mock type for the KcpHelperInterface type
type KcpHelper struct {
	mock.Mock
}

type KcpHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *KcpHelper) EXPECT() *KcpHelper_Expecter {
	return &KcpHelper_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function with given fields: _a0, name, namespace
func (_m *KcpHelper) GetSecret(_a0 client.Client, name string, namespace string) (*v1.Secret, error) {
	ret := _m.Called(_a0, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Client, string, string) (*v1.Secret, error)); ok {
		return rf(_a0, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(client.Client, string, string) *v1.Secret); ok {
		r0 = rf(_a0, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Client, string, string) error); ok {
		r1 = rf(_a0, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KcpHelper_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type KcpHelper_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - _a0 client.Client
//   - name string
//   - namespace string
func (_e *KcpHelper_Expecter) GetSecret(_a0 interface{}, name interface{}, namespace interface{}) *KcpHelper_GetSecret_Call {
	return &KcpHelper_GetSecret_Call{Call: _e.mock.On("GetSecret", _a0, name, namespace)}
}

func (_c *KcpHelper_GetSecret_Call) Run(run func(_a0 client.Client, name string, namespace string)) *KcpHelper_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Client), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *KcpHelper_GetSecret_Call) Return(_a0 *v1.Secret, _a1 error) *KcpHelper_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KcpHelper_GetSecret_Call) RunAndReturn(run func(client.Client, string, string) (*v1.Secret, error)) *KcpHelper_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewKcpClient provides a mock function with given fields: config, workspacePath
func (_m *KcpHelper) NewKcpClient(config *rest.Config, workspacePath string) (client.Client, error) {
	ret := _m.Called(config, workspacePath)

	if len(ret) == 0 {
		panic("no return value specified for NewKcpClient")
	}

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*rest.Config, string) (client.Client, error)); ok {
		return rf(config, workspacePath)
	}
	if rf, ok := ret.Get(0).(func(*rest.Config, string) client.Client); ok {
		r0 = rf(config, workspacePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*rest.Config, string) error); ok {
		r1 = rf(config, workspacePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KcpHelper_NewKcpClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewKcpClient'
type KcpHelper_NewKcpClient_Call struct {
	*mock.Call
}

// NewKcpClient is a helper method to define mock.On call
//   - config *rest.Config
//   - workspacePath string
func (_e *KcpHelper_Expecter) NewKcpClient(config interface{}, workspacePath interface{}) *KcpHelper_NewKcpClient_Call {
	return &KcpHelper_NewKcpClient_Call{Call: _e.mock.On("NewKcpClient", config, workspacePath)}
}

func (_c *KcpHelper_NewKcpClient_Call) Run(run func(config *rest.Config, workspacePath string)) *KcpHelper_NewKcpClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rest.Config), args[1].(string))
	})
	return _c
}

func (_c *KcpHelper_NewKcpClient_Call) Return(_a0 client.Client, _a1 error) *KcpHelper_NewKcpClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KcpHelper_NewKcpClient_Call) RunAndReturn(run func(*rest.Config, string) (client.Client, error)) *KcpHelper_NewKcpClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewKcpHelper creates a new instance of KcpHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKcpHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *KcpHelper {
	mock := &KcpHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
