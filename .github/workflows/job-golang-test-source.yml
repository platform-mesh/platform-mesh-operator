name: Golang Test Source
on:
  workflow_call:
    inputs:
      useTask:
        required: false
        type: boolean
        default: false
      coverageThresholdFile:
        type: number
      coverageThresholdPackage:
        type: number
      coverageThresholdTotal:
        type: number
      useLocalCoverageConfig:
        required: false
        type: boolean
        default: false
      runsOn:
        required: false
        type: string
        default: 'ubuntu-latest'
      envArgs:
        required: false
        type: string
        default: ''

jobs:
  test:
    runs-on: ${{ inputs.runsOn }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Install Task
        uses: arduino/setup-task@v2
        if: ${{ inputs.useTask }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Test Go
        if: ${{ inputs.useTask == false }}
        run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        with:
         app-id: "1415820"
         private-key: ${{ secrets.PM_PUBLISHER_PRIVATE_KEY }}
         owner: ${{ github.repository_owner }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: gha
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: export tokens
        run: |
          echo "WORKFLOW_GITHUB_PAT=${{ steps.generate-token.outputs.token }}" >> $GITHUB_ENV
      - name: Test task
        if: ${{ inputs.useTask == true }}
        run: |
          task cover
      - name: Install Code Coverage
        run: go install github.com/vladopajic/go-test-coverage/v2@latest
      - name: Check Test Coverage
        run: go-test-coverage --threshold-file ${{ inputs. coverageThresholdFile }} --threshold-package ${{ inputs. coverageThresholdPackage }} --threshold-total ${{ inputs. coverageThresholdTotal }} --profile cover.out
        if: ${{ inputs.useLocalCoverageConfig == false }}
      - name: Check Test Coverage with Config
        run: go-test-coverage --threshold-file ${{ inputs. coverageThresholdFile }} --threshold-package ${{ inputs. coverageThresholdPackage }} --threshold-total ${{ inputs. coverageThresholdTotal }} --profile cover.out --config ./.testcoverage.yml
        if: ${{ inputs.useLocalCoverageConfig == true }}