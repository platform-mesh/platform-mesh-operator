version: '3'

dotenv: ['.taskenv', '.secret/.env', '{{.HOME}}/.env' ]
vars:
  LOCAL_BIN: bin
  CONTROLLER_TOOLS_VERSION: v0.18.0
  ENVTEST_VERSION: release-0.17
  CRD_DIRECTORY: config/crd
  TEST_SETUP_DIRECTORY: setup/01-openmfp-system
  GOMPLATE_VERSION: v4.3.0
  KUSTOMIZE_VERSION: v5.4.3
  OCM_VERSION: 0.24.0
  KIND_VERSION: v0.29.0
  KUBECTL: kubectl
  GOARCH:
    sh: go env GOARCH
  GOOS:
    sh: go env GOOS
  KUSTOMIZE: "{{.LOCAL_BIN}}/kustomize"
tasks:
  ## Setup
  setup:mockery:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mockery || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vektra/mockery/v2@v2.53.3
  setup:go-test-coverage:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/go-test-coverage || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/vladopajic/go-test-coverage/v2@latest
  setup:kustomize:
    internal: true
    cmds:
      - test -s {{.KUSTOMIZE}} || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/kustomize/kustomize/v5@{{.KUSTOMIZE_VERSION}}
  setup:controller-gen:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/controller-gen || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}
  setup:gomplate:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/gomplate || curl -o {{.LOCAL_BIN}}/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/{{ .GOMPLATE_VERSION }}/gomplate_{{ .GOOS }}-{{ .GOARCH }} && chmod +x {{.LOCAL_BIN}}/gomplate && chmod 755 {{.LOCAL_BIN}}/gomplate
  setup:golangci-lint:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/golangci-lint || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  setup:ocm:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/ocm || (curl -o {{.LOCAL_BIN}}/ocm.tar.gz -sSL https://github.com/open-component-model/ocm/releases/download/v{{ .OCM_VERSION }}/ocm-{{ .OCM_VERSION }}-{{ .GOOS }}-{{ .GOARCH }}.tar.gz && tar -xzf {{ .LOCAL_BIN }}/ocm.tar.gz -C {{ .LOCAL_BIN }} && rm {{ .LOCAL_BIN }}/ocm.tar.gz && chmod +x {{.LOCAL_BIN}}/ocm && chmod 755 {{.LOCAL_BIN}}/ocm)
  setup:mkcert:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mkcert || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install filippo.io/mkcert@latest
      - export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
  setup:kind:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/kind || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install sigs.k8s.io/kind@{{ .KIND_VERSION }}
      - export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
  
  ## Development
  mockery:
    deps: [setup:mockery]
    cmds:
      - "{{.LOCAL_BIN}}/mockery"
  
  kindtest:
    deps: [setup:mkcert, setup:kind]
    env:
      GO111MODULE: on
    cmds:
      - |
        export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
        go test -timeout 15m -coverprofile=cover.out github.com/openmfp/openmfp-operator/test/e2e/kind {{.ADDITIONAL_COMMAND_ARGS}}


  test:
    deps: [mockery, setup:kind, setup:mkcert]
    env:
      GO111MODULE: on
      # GH_TOKEN: "{{.WORKFLOW_GITHUB_PAT}}"
    cmds:
      - |
        if [ "$GITHUB_WORKFLOW" = "ci" ]; then
          echo "Running tests in Github Actions"
          echo "127.0.0.1 portal.dev.local kcp.api.portal.dev.local" | sudo tee -a /etc/hosts
          GH_TOKEN=$WORKFLOW_GITHUB_PAT PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH go test -timeout 15m -coverprofile=cover.out ./... {{.ADDITIONAL_COMMAND_ARGS}}
        else
          # test if portal.dev.local and kcp.api.portal.dev.local are in /etc/hosts
          if ! grep -q "portal.dev.local" /etc/hosts; then
            echo "Missing portal.dev.local in /etc/hosts"
            exit 1
          fi
          if ! grep -q "kcp.api.portal.dev.local" /etc/hosts;
          then
            echo "Missing kcp.api.portal.dev.local in /etc/hosts"
            exit 1
          fi
          export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
          go test -timeout 15m -coverprofile=cover.out ./... {{.ADDITIONAL_COMMAND_ARGS}}
        fi
        
  manifests:
    deps: [setup:controller-gen]
    cmds:
      - "{{.LOCAL_BIN}}/controller-gen rbac:roleName=manager-role crd paths=./... output:crd:artifacts:config={{.CRD_DIRECTORY}}"
  generate:
    cmds:
      - task: manifests
      - "{{.LOCAL_BIN}}/controller-gen object:headerFile=hack/boilerplate.go.txt paths=./..."
      # - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir ./config/resources"
      # - "{{.LOCAL_BIN}}/apigen --input-dir {{.CRD_DIRECTORY}} --output-dir {{ .TEST_SETUP_DIRECTORY }}"
  build:
    cmds:
      - go build -o bin/manager main.go
  docker-build:
    cmds:
      - docker build .
  ## Testing
  fmt:
    cmds:
      - go fmt ./...
  lint:
    deps: [setup:golangci-lint]
    cmds:
      - task: fmt
      - "{{.LOCAL_BIN}}/golangci-lint run --timeout 15m ./..."
  cover:
    deps:
      - task: setup:go-test-coverage
      - task: test
        vars:
          ADDITIONAL_COMMAND_ARGS: -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
    cmds:
        - "{{.LOCAL_BIN}}/go-test-coverage --threshold-file 30 --threshold-package 60 --threshold-total 45 --profile cover.out --config ./.testcoverage.yml"
  helm-unittest:
    cmds:
      - helm unittest chart
  validate:
    cmds:
      - task: lint
      - task: test
  install:
    deps: [setup:kustomize]
    cmds:
      - "{{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -"
  run:
    cmds:
      - source .env && go run ./main.go operator
  bump-versions:
    deps: [setup:ocm]
    cmds:
      - task: bump-versions-internal
  bump-versions-internal:
    internal: true
    vars:
      SERVICES: 
        - account-operator
        - account-ui
        - apeiro-example-content
        - apeiro-portal
        - portal
        - extension-manager-operator
        - fga-operator
        - rebac-authz-webhook
        - iam-service
        - infra
        - kcp
        - keycloak
        - kubernetes-graphql-gateway
        - openfga
        - observability
        - crossplane
        - istiod
        - istio-gateway
        - istio-base
        - example-resources
      OPENMFP_PRIV_COMP:
        sh: "{{.LOCAL_BIN}}/ocm get componentversions --latest github.com/openmfp/openmfp-priv --repo ghcr.io/openmfp/ocm -o json"
    cmds:
      - OPENMFP_PRIV_COMP_VERSION=$(echo "{{ .OPENMFP_PRIV_COMP }}" | yq -r '.items[0].component.version') yq -i ".spec.version.semver = strenv(OPENMFP_PRIV_COMP_VERSION)" deployment/component-version.yaml
      - for:
          var: SERVICES
        cmd: COMP_VERSION=$(echo "{{ .OPENMFP_PRIV_COMP }}" | yq -r '.items[0].component.componentReferences[] | select(.name == "{{ .ITEM }}").version') yq -i ".spec.sourceRef.resourceRef.version = strenv(COMP_VERSION)" deployment/{{ range splitList "-" .ITEM }}{{ . }}{{ end }}/resource.yaml
